@using Algebra.SecureCoding.Web.Models.CryptographicFailures
@model CardInformationDto

<div class="container">
    <div class="text-center">
        <h1>A02:2021 – Cryptographic Failures</h1>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="row">
                <div class="col-12">
                    <h3>How to Prevent</h3>
                    <p>Do the following, at a minimum, and consult the references:</p>
                    <ul>
                        <li>
                            Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.
                        </li>
                        <li>
                            Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.
                        </li>
                        <li>
                            Make sure to encrypt all sensitive data at rest.
                        </li>
                        <li>
                            Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.
                        </li>
                        <li>
                            Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).
                        </li>
                        <li>
                            Disable caching for response that contain sensitive data.
                        </li>
                        <li>
                            Apply required security controls as per the data classification.
                        </li>
                        <li>
                            Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.
                        </li>
                        <li>
                            Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.
                        </li>
                        <li>
                            Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.
                        </li>
                        <li>
                            Always use authenticated encryption instead of just encryption.
                        </li>
                        <li>
                            Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.
                        </li>
                        <li>
                            Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.
                        </li>
                        <li>
                            Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .
                        </li>
                        <li>
                            Verify independently the effectiveness of configuration and settings.
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-6 p-5">
            <div class="row">
                <div class="col-12">
                    <h2>Submitted Card Information</h2>
                    <div><strong>Cardholder's Name:</strong> @Model.CardholdersName</div>
                    <div><strong>Card Number:</strong> @Model.CardNumber</div>
                    <div><strong>Expiration Date:</strong> @Model.ExpirationDate</div>
                    <div><strong>CVV:</strong> @Model.Ccv</div>
                </div>
                <div class="col-12 m-2">
                    <h3>What happened?</h3>
                    <p>Sensitive data (like login credentials, personal information, etc.) can be intercepted when transmitted over an unencrypted HTTP connection.</p>
                    <p>Using a network sniffing tool like Wireshark or tcpdump can capture network traffic between the client and the server.</p>
                    <img style="cursor:zoom-in" class="img-fluid" src="~/img/wireshark_snimka1.png" id="wiresharkImg" />
                </div>
            </div>
            <a class="btn btn-primary float-end p-2" asp-action="CryptographicFailures">Try again</a>
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $('#wiresharkImg').on('click', function () {
            var src = $(this).attr('src');

            $('<div>').css({
                background: 'RGBA(0,0,0,.9) url(' + src + ') no-repeat center',
                backgroundSize: 'contain',
                width: '100%', height: '100%',
                position: 'fixed',
                zIndex: '10000',
                top: '0', left: '0',
                cursor: 'zoom-out'
            }).click(function () {
                $(this).remove();
            }).appendTo('body');
        });
        </script>
}