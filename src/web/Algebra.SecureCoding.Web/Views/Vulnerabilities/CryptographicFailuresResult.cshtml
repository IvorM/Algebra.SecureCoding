@using Algebra.SecureCoding.Web.Models.CryptographicFailures
@model CardInformationDto

<div class="container">
    <div class="text-center">
        <h1>A02:2021 – Cryptographic Failures</h1>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="row">
                <div class="col-12">
                    <h3>How to Prevent</h3>
                    <p>Do the following, at a minimum, and consult the references:</p>
                    <ul>
                        <li>
                            Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.
                        </li>
                        <li>
                            Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.
                        </li>
                        <li>
                            Make sure to encrypt all sensitive data at rest.
                        </li>
                        <li>
                            Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.
                        </li>
                        <li>
                            Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).
                        </li>
                        <li>
                            Disable caching for response that contain sensitive data.
                        </li>
                        <li>
                            Apply required security controls as per the data classification.
                        </li>
                        <li>
                            Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.
                        </li>
                        <li>
                            Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.
                        </li>
                        <li>
                            Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.
                        </li>
                        <li>
                            Always use authenticated encryption instead of just encryption.
                        </li>
                        <li>
                            Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.
                        </li>
                        <li>
                            Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.
                        </li>
                        <li>
                            Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .
                        </li>
                        <li>
                            Verify independently the effectiveness of configuration and settings.
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-6 p-5">
            <div class="row">
                <div class="col-12">
                    <h2>Submitted Card Information</h2>
                    <div><strong>Cardholder's Name:</strong> @Model.CardholdersName</div>
                    <div><strong>Card Number:</strong> @Model.CardNumber</div>
                    <div><strong>Expiration Date:</strong> @Model.ExpirationDate</div>
                    <div><strong>CVV:</strong> @Model.Ccv</div>
                </div>
                <div class="col-12 m-2">
                    <h3>How was it fixed?</h3>
                    <p>Developer implemented HTTPS</p>
                    <h4>What is HTTPS?</h4>
                    <p>Hypertext transfer protocol secure (HTTPS) is the secure version of HTTP, which is the primary protocol used to send data between a web browser and a website. HTTPS is encrypted in order to increase security of data transfer. This is particularly important when users transmit sensitive data, such as by logging into a bank account, email service, or health insurance provider.</p>
                    <h4>How does HTTPS work?</h4>
                    <p>HTTPS uses an encryption protocol to encrypt communications. The protocol is called Transport Layer Security (TLS), although formerly it was known as Secure Sockets Layer (SSL). This protocol secures communications by using what’s known as an asymmetric public key infrastructure. This type of security system uses two different keys to encrypt communications between two parties:</p>
                    <ul>
                        <li>
                            The private key - this key is controlled by the owner of a website and it’s kept, as the reader may have speculated, private. This key lives on a web server and is used to decrypt information encrypted by the public key.
                        </li>
                        <li>
                            The public key - this key is available to everyone who wants to interact with the server in a way that’s secure. Information that’s encrypted by the public key can only be decrypted by the private key.
                        </li>
                    </ul>
                </div>
            </div>
            <a class="btn btn-primary float-end p-2" asp-action="CryptographicFailures">Try again</a>
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $('#wiresharkImg').on('click', function () {
            var src = $(this).attr('src');

            $('<div>').css({
                background: 'RGBA(0,0,0,.9) url(' + src + ') no-repeat center',
                backgroundSize: 'contain',
                width: '100%', height: '100%',
                position: 'fixed',
                zIndex: '10000',
                top: '0', left: '0',
                cursor: 'zoom-out'
            }).click(function () {
                $(this).remove();
            }).appendTo('body');
        });
        </script>
}